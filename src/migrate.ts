import path from "path";
import fs from "fs";

(function() {
    // foloseste process.argv sa iei command line arguments din npm run blabla
    // o sa fie un array care MEREU contine in index 0 si 1 ceva ce nu imi trebuie
        // adica path spre node.exe si path spre scriptul care ruleaza
    if (process.argv.length === 2) {
        throw new Error("Ai uitat sa dai argumentele necesare. Primul argument: numele migratiei.");
    }

    const processArgs = process.argv.slice(2);
    const currentWorkingDir: string = path.resolve('');
    const migrationsFilePath: string = path.normalize(path.resolve('./migrationsHistory.json'));
    const migrationsFolderPath: string = path.normalize(path.resolve("./src/migrations"));

    const migrationName = processArgs[0];
    const migrationsFile = JSON.parse(fs.readFileSync(migrationsFilePath).toString());
    const migrationsFolderStructure = fs.readdirSync(migrationsFolderPath);
    
    let migrationNumber = 0;
    for(let i = 0; i < migrationsFolderStructure.length; i++) {
        const entryStat = fs.lstatSync(path.normalize(path.resolve(migrationsFolderPath, migrationsFolderStructure[i])));
        if (entryStat.isDirectory()) {
            migrationNumber = parseInt(migrationsFolderStructure[i].split(" ")[0]);
        }
    }

    let newMigrationFolderName: string;
    if(migrationNumber < 10) {
        newMigrationFolderName = `0${migrationNumber+1}. ${migrationName}`;
        migrationsFile[newMigrationFolderName] = false;
    } else {
        newMigrationFolderName = `${migrationNumber+1}. ${migrationName}`;
        migrationsFile[newMigrationFolderName] = false;
    }
    
    fs.mkdirSync(`${migrationsFolderPath}/${newMigrationFolderName}`);
    fs.writeFileSync(migrationsFilePath, JSON.stringify(migrationsFile));

    const migrationTemplate: string = 
`/*
    * Template generated by script
    * Migration ${migrationNumber + 1}
    * <Insert migration description in here>
*/
import { TestTransaction, GokuTransactions } from "../../models";
import { APP_ENV } from "yosoybotDB";

export const ${migrationName} = (appMode: APP_ENV | string | undefined, callback: () => any): void => {
    if (appMode === "local") {
        console.log("local migration");
    } else if (appMode === "production") {
        console.log("production migration");
    }
};
`;
    fs.writeFileSync(`${migrationsFolderPath}/${newMigrationFolderName}/${migrationName}.ts`, migrationTemplate);    
})();